#!/usr/bin/ruby -w

# Usage: pb_cat_compile inFILE outFILE

require 'fileutils'

$include_path = []

$slash = './'


$include_path.push File.dirname(__FILE__) + '@include_path_relto_pb_build@'

unless @srcdir_equals_builddir@
    # We are not building in the source tree so we add
    # top_src_fullpath/rel_include_dir to the file search path
    if '@rel_include_dir@'.length > 0
        $include_path.push '@top_src_fullpath@/@rel_include_dir@'
    else
        $include_path.push '@top_src_fullpath@'
    end
end


if ARGV.length != 2
    $stderr.print <<-END
Usage: pb_cat_compile inFILE outFILE

    END
end


$pwd = Dir.pwd

$inpath = ARGV.shift
$outpath = ARGV.shift


def failure(err)

    FileUtils.rm_f $outpath
    FileUtils.rm_f $outpath + '.d'
    $stderr.print "  pb_cat_compile #{$inpath} #{$outpath} FAILED\n"
    $stderr.print '  ' + err + "\n"
    begin
        throw
    rescue
        $!.backtrace.each do |e|
            $stderr.print '  ' + e + "\n"
    $stderr.print "p=" + p + "\n"
        end
    end
    exit 1
end


def find_path(path)

    return path if File.exist? path

    $include_path.each do |d|
        p =  d + '/' + path
        if File.exist? p
            return p
        end
        $stderr.print "p=" + p + "\n"
    end


    failure "Cannot find file " + path + " to include\n" +
        "  include path = #{$include_path.join(' ')}"
end

def read_file(path)

    File.read(find_path(path))

end


$files = []

def get_files(file)

    if file =~ /(\.ccss$|\.ccs$|\.cjs$|\.cjsp$|\.chtml$|\.chtm$|\.cphp$)/
        File.open(find_path(file), 'r').each_line do |line|
            line.strip!
            get_files(line) if line and
                line.length > 0 and line =~ /^[^#]/
        end
    elsif file =~ /(\.css$|\.cs$|\.js$|\.jsp$|\.txt$|\.ht$|\.htm$|\.html$|\.ph$|\.phd$)/
        $files.push file
    else
        failure file + " has unknown file type"
    end
end

get_files $inpath

$files.uniq!

$yui = false


# generate make depend file
$out = File.open($outpath + '.d', 'w')
$out.write <<END
# @generated_file_string@
# this is a make depend file

END
$out.write $outpath + ':'
$files.each do |f|
    $out.write "\\\n " + f
end
$out.write "\n"
$out.close


if $outpath =~ /\.css$/ and not @debug@
    $yui = '@css_compile@ > ' + $outpath
    $out = IO.popen($yui, 'w')
elsif $outpath =~ /\.js$/ and not @debug@
    $yui = '@js_compile@ > ' + $outpath
    $out = IO.popen($yui, 'w')
else
    $out = File.open($outpath, 'w')
end

$gen_magic_str = '@generated_file_string@'

if $outpath =~ /(\.html|\.htm)$/ # .html .htm

    # We put '@generated_file_string@' after the <!DOCTYPE html>
    ff = File.open(find_path($files[0]), 'r')
    line = ff.gets
    if line =~ /\s*<\s*!\s*DOCTYPE\s*html>\s*/
        $out.write line + "<!-- #{$gen_magic_str} from #{$inpath} -->\n"
    else
        $out.write "<!-- #{$gen_magic_str} -->\n" + line
        $out.write "<!-- START FILE: #{$files[0]} -->\n" if @debug@
    end

    while line = ff.gets
        $out.write line
    end
    ff.close
    $out.write "<!--   END FILE: #{$files[0]} -->\n" if @debug@

    n = $files.length - 1
    $files[1..n].each do |path|
        $out.write "<!-- START FILE: #{path} -->\n" if @debug@
        $out.write read_file(path)
        $out.write "<!--   END FILE: #{path} -->\n" if @debug@
    end

elsif $outpath =~ /\.php$/ # .php

    $out.write "<?php\n  /* #{$gen_magic_str} from #{$inpath} */\n?>"
    $files.each do |path|
        $out.write "<?php /* START FILE: #{path} */\n?>" if @debug@
        $out.write read_file(path)
        $out.write "<?php /*   END FILE: #{path} */\n?>" if @debug@
    end

elsif $outpath =~ /(\.cs|\.css|\.js|\.jsp)$/ # .cs .css .js .jsp

    $out.write "/* #{$gen_magic_str} from #{$inpath} */\n"
    $files.each do |path|
        $out.write "/* START FILE: #{path} */\n" if @debug@
        $out.write read_file(path)
        $out.write "/*   END FILE: #{path} */\n" if @debug@
    end

else
    failure 'unknown file type for output file ' + $outpath
end

$out.close

if $yui and not $?.success?
    failure 'Running "' + $yui + '" failed'
end

